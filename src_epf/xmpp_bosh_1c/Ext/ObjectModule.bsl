Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));	
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение");	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 	
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);	
	Если Не ЗначениеЗаполнено(Информация) Тогда		
		Информация = ЭтотОбъект.Метаданные().Комментарий;		
	КонецЕсли; 	
	ПараметрыРегистрации.Вставить("Информация", Информация);	
	ПараметрыРегистрации.Вставить("Версия", Версия);
	Возврат ПараметрыРегистрации;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации();
	ПараметрыРегистрации.Версия = "0.1";
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
		"XMPP-пример", // Представление команды в пользовательском интерфейсе
		"XMPP",
		"ОткрытиеФормы", // Уникальный идентификатор команды
	);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции //СведенияОВнешнейОбработке()

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

Функция MD5ХешСтрока(тСтрока, а1НЕХ64="") Экспорт
	// В версии платформы 8.3 наконец-то был реализован штатный механизм хеширования данных, который позволяет хешировать строки и файлы при помощи алгоритмов MD5, SHA1, SHA256 и CRC32.
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Если НЕ а1НЕХ64="" Тогда
		Хеш.Добавить(Base64Значение(а1НЕХ64));
	КонецЕсли;
	Хеш.Добавить(тСтрока);
	СтрокаМД5 = Хеш.ХешСумма;
	СтрокаМД5 = НРег(СтрокаМД5);
	СтрокаМД5 = СтрЗаменить(СтрокаМД5," ", "");
	Возврат СтрокаМД5;
КонецФункции

Функция MD5b64(тСтрока) Экспорт
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(тСтрока);
	раск64 = Base64Строка(Хеш.ХешСумма);
	Возврат раск64;
КонецФункции

Функция Декодировать64(строка64) Экспорт
	ДвДанные = Base64Значение(строка64);
	Если ДвДанные = Неопределено Тогда
		Возврат "-=Ошибка формата Base64=-";
	КонецЕсли;
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвДанные.Записать(ВременныйФайл);
	
	Чтение = Новый ЧтениеТекста(ВременныйФайл, "CESU-8");
	СтрокаИз64 = Чтение.Прочитать();
	Чтение.Закрыть();
	Попытка 
		УдалитьФайлы(ВременныйФайл);
	Исключение 
	КонецПопытки;
	Возврат СтрокаИз64;
КонецФункции

Функция Кодировать64(Строка) Экспорт
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	ЗаписьТекста.Записать(Строка);
	ЗаписьТекста.Закрыть();
	
	ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	СтрокаBase64 = Base64Строка(ДД_Файла);
	
	Попытка 
		УдалитьФайлы(ВременныйФайл);
	Исключение 
	КонецПопытки;
	Возврат СтрокаBase64;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

Функция РазложитьСМ(Знач Стр, Разделитель = ",") Экспорт
	Список = Новый Массив();
	Длина = СтрДлина(Разделитель);	
	Стр = СокрЛП(Стр);
	Поз = Найти(Стр, Разделитель);	
	Пока 0 < Поз Цикл
		Список.Добавить(СокрП(Лев(Стр, Поз-1)));		
		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
	КонецЦикла;	
	Список.Добавить(Стр);	
	Возврат Список;
КонецФункции //РазложитьСМ()

Функция РазложитьСтрокуВСтруктуру(Знач Строка, Знач Разделитель = ",") Экспорт
	результат = Новый Структура;
	МассивРазбора = РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
	Для Каждого мсвРзб из МассивРазбора Цикл
		стрРазбора = мсвРзб;
		_команда="";
		_значение="";
		Позиция = Найти(стрРазбора, "=");
		Если Позиция > 0 Тогда
			_команда = Лев(стрРазбора, Позиция - 1);
			_значение = Сред(стрРазбора, Позиция + СтрДлина("="));
			_значение = СтрЗаменить(_значение, """", ""); // убираем символ двойных кавычек (")
		КонецЕсли;
		результат.Вставить(_команда,_значение);
	КонецЦикла;
	Возврат результат;
КонецФункции